# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17OhHHfAMePAjOtJ8d7eglgvfGPUFmuZC
"""

import pandas as pd
import numpy as np

dataset=pd.read_csv('/content/drive/MyDrive/penguins.csv')

dataset.head()

dataset.describe()

dataset.shape

dataset.isnull().sum()

count = 50
sumlen = sumdepth = sumfl = summass = 0.0

for index, line in dataset.iterrows():
    if line["Species"] == "Adelie":
        if pd.isna(line["CulmenLength"]) or pd.isna(line["CulmenDepth"]) or pd.isna(line["FlipperLength"]) or pd.isna(line["BodyMass"]):
            continue  # skip missing values

        #count += 1
        #print("iam here")

        sumlen += line["CulmenLength"]
        sumdepth += line["CulmenDepth"]
        sumfl += line["FlipperLength"]
        summass += line["BodyMass"]

print("Count:", count)
print("Average Culmen Length:", sumlen / count)
print("Average Culmen Depth:", sumdepth / count)
print("Average Flipper Length:", sumfl / count)
print("Average Body Mass:", summass / count)

for index, line in dataset.iterrows():
  if(line["Species"] == "Adelie" and (pd.isna(line["CulmenLength"]) or pd.isna(line["CulmenDepth"]) or pd.isna(line["FlipperLength"]) or pd.isna(line["BodyMass"])) ):
    dataset.loc[index, "CulmenLength"] = sumlen / 50
    dataset.loc[index, "CulmenDepth"] = sumdepth / 50
    dataset.loc[index, "FlipperLength"] = sumfl / 50
    dataset.loc[index, "BodyMass"] = summass / 50

count = 50
sumlen = sumdepth = sumfl = summass = 0.0

for index, line in dataset.iterrows():
    if line["Species"] ==  "Gentoo":
        if pd.isna(line["CulmenLength"]) or pd.isna(line["CulmenDepth"]) or pd.isna(line["FlipperLength"]) or pd.isna(line["BodyMass"]):
            continue  # skip missing values

        #count += 1
        #print("iam here")

        sumlen += line["CulmenLength"]
        sumdepth += line["CulmenDepth"]
        sumfl += line["FlipperLength"]
        summass += line["BodyMass"]

print("Count:", count)
print("Average Culmen Length:", sumlen / count)
print("Average Culmen Depth:", sumdepth / count)
print("Average Flipper Length:", sumfl / count)
print("Average Body Mass:", summass / count)

for index, line in dataset.iterrows():
  if(line["Species"] == "Gentoo" and (pd.isna(line["CulmenLength"]) or pd.isna(line["CulmenDepth"]) or pd.isna(line["FlipperLength"]) or pd.isna(line["BodyMass"])) ):
    dataset.loc[index, "CulmenLength"] = sumlen / 50
    dataset.loc[index, "CulmenDepth"] = sumdepth / 50
    dataset.loc[index, "FlipperLength"] = sumfl / 50
    dataset.loc[index, "BodyMass"] = summass / 50

dataset.isnull().sum()

cols = ["CulmenLength", "CulmenDepth", "FlipperLength", "BodyMass"]

outliers = {}

for col in cols:
    Q1 = dataset[col].quantile(0.25)
    Q3 = dataset[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR

    mask = (dataset[col] < lower) | (dataset[col] > upper)

    outliers[col] = dataset[mask]

for col, rows in outliers.items():
    print(f"Outliers in {col}:")
    print(rows)
    print("="*50)

dataset['OriginLocation'].replace("Dream", 1, inplace=True)
dataset['OriginLocation'].replace("Biscoe", 2, inplace=True)
dataset['OriginLocation'].replace("Torgersen", 0, inplace=True)

dataset['Species'].replace("Adelie", 0, inplace=True)
dataset['Species'].replace("Gentoo", 1, inplace=True)
dataset['Species'].replace("Chinstrap", 2, inplace=True)

dataset.head()

dataset.duplicated().sum()

dataset["BeakRatio"] = dataset["CulmenLength"] / dataset["CulmenDepth"]

dataset["WingToMass"] = dataset["FlipperLength"] / dataset["BodyMass"]

dataset.head()

dataset.to_csv("Preprocessed.csv", index=False)

from sklearn.model_selection import train_test_split
species_mapping = {0: "Adelie", 1: "Gentoo", 2: "Chinstrap"}

species_list = dataset['Species'].unique()

for code in species_list:
    species_name = species_mapping[code]
    species_data = dataset[dataset['Species'] == code]

    train_data, test_data = train_test_split(
        species_data, train_size=30, test_size=20, random_state=42
    )


    train_data.to_csv(f"{species_name}_train.csv", index=False)
    test_data.to_csv(f"{species_name}_test.csv", index=False)
    print(f"Saved {species_name}_train.csv and {species_name}_test.csv")

